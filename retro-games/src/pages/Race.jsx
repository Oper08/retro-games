import React, { useState, useEffect, useRef } from "react";

const gridHeight = 10;
const gridWidth = 30;  // –ë–æ–ª—å—à–∞—è —Ç—Ä–∞—Å—Å–∞
const initialCar = { row: 5, col: 0 };
const obstacleCount = 50;

const RaceHorizontalFixed = () => {
  const [car, setCar] = useState(initialCar);
  const [obstacles, setObstacles] = useState(new Set());
  const [winner, setWinner] = useState(null);
  const intervalRef = useRef(null);
  const trackRef = useRef(null);

  const generateObstacles = () => {
    const obs = new Set();
    while (obs.size < obstacleCount) {
      const row = Math.floor(Math.random() * gridHeight);
      const col = Math.floor(Math.random() * gridWidth);
      if (!(row === initialCar.row && col === initialCar.col) && col !== gridWidth - 1) {
        obs.add(`${row}-${col}`);
      }
    }
    return obs;
  };

  useEffect(() => {
    setObstacles(generateObstacles());
  }, []);

  useEffect(() => {
    if (winner) return;

    const handleKeyDown = (e) => {
      setCar((prev) => {
        let newRow = prev.row;
        if (e.key === "ArrowUp" && prev.row > 0) newRow--;
        if (e.key === "ArrowDown" && prev.row < gridHeight - 1) newRow++;

        if (obstacles.has(`${newRow}-${prev.col}`)) {
          setWinner("üí• –í—Ä–µ–∑–∞–ª—Å—è! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.");
          clearInterval(intervalRef.current);
          return prev;
        }

        return { ...prev, row: newRow };
      });
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [winner, obstacles]);

  useEffect(() => {
    intervalRef.current = setInterval(() => {
      if (winner) return;

      setCar((prev) => {
        const newCol = prev.col + 1;
        if (newCol >= gridWidth) {
          setWinner("üèÜ –ü–æ–±–µ–¥–∞! –¢—ã –¥–æ–µ—Ö–∞–ª –¥–æ —Ñ–∏–Ω–∏—à–∞!");
          clearInterval(intervalRef.current);
          return prev;
        }

        if (obstacles.has(`${prev.row}-${newCol}`)) {
          setWinner("üí• –í—Ä–µ–∑–∞–ª—Å—è! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.");
          clearInterval(intervalRef.current);
          return prev;
        }

        return { ...prev, col: newCol };
      });
    }, 500);

    return () => clearInterval(intervalRef.current);
  }, [winner, obstacles]);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∑–∞ –º–∞—à–∏–Ω–æ–π
  useEffect(() => {
    if (!trackRef.current) return;
    const container = trackRef.current;
    // –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏
    const cellWidth = 40;
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –º–∞—à–∏–Ω—É –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    // –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –º–∞—à–∏–Ω–∞ –±—ã–ª–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –∏–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –ª–µ–≤–µ–µ —Ü–µ–Ω—Ç—Ä–∞ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
    const visibleWidth = container.clientWidth;
    const targetScrollLeft = car.col * cellWidth - visibleWidth / 2 + cellWidth / 2;
    container.scrollTo({
      left: targetScrollLeft > 0 ? targetScrollLeft : 0,
      behavior: "smooth",
    });
  }, [car]);

  const restartGame = () => {
    setCar(initialCar);
    setWinner(null);
    setObstacles(generateObstacles());
  };

  const renderGrid = () => {
    const grid = [];
    for (let row = 0; row < gridHeight; row++) {
      for (let col = 0; col < gridWidth; col++) {
        const key = `${row}-${col}`;
        let background = "#222";
        if (car.row === row && car.col === col) background = "#007bff"; // —Å–∏–Ω–∏–π —è—Ä–∫–∏–π
        else if (obstacles.has(key)) background = "#b54545"; // –∫—Ä–∞—Å–Ω—ã–π —Ç–µ–º–Ω—ã–π
        else if (col === gridWidth - 1) background = "#666"; // —Ñ–∏–Ω–∏—à —Å–µ—Ä—ã–π
        else if (col === 0) background = "#444"; // —Å—Ç–∞—Ä—Ç —Ç–µ–º–Ω—ã–π —Å–µ—Ä—ã–π

        grid.push(
          <div
            key={key}
            style={{
              width: 40,
              height: 40,
              backgroundColor: background,
              border: "1px solid #111",
              transition: "background-color 0.3s ease",
              boxSizing: "border-box",
              borderRadius: 4,
            }}
          />
        );
      }
    }
    return grid;
  };

  return (
    <div
      style={{
        textAlign: "center",
        color: "white",
        background:
          "linear-gradient(135deg, #0d0d0d, #1a1a1a)",
        minHeight: "100vh",
        padding: 20,
        fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
      }}
    >
      <h1 style={{ marginBottom: 5 }}>üèÅ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≥–æ–Ω–∫–∞ —Å –±–æ–ª—å—à–æ–π —Ç—Ä–∞—Å—Å–æ–π</h1>
      <p style={{ marginTop: 0, marginBottom: 20, fontSize: 18 }}>
        üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å—Ç—Ä–µ–ª–∫–∏ ‚Üë ‚Üì
      </p>

      {winner && (
        <h2
          style={{
            color: winner.includes("–ü–æ–±–µ–¥–∞") ? "#00ff00" : "#ff4444",
            marginBottom: 20,
          }}
        >
          {winner}
        </h2>
      )}

      <button
        onClick={restartGame}
        style={{
          padding: "12px 25px",
          fontSize: 16,
          backgroundColor: "#007bff",
          border: "none",
          borderRadius: 6,
          cursor: "pointer",
          color: "white",
          fontWeight: "600",
          boxShadow: "0 4px 10px rgba(0,123,255,0.3)",
          marginBottom: 20,
          transition: "background-color 0.3s ease",
        }}
        onMouseEnter={e => (e.currentTarget.style.backgroundColor = "#0056b3")}
        onMouseLeave={e => (e.currentTarget.style.backgroundColor = "#007bff")}
      >
        –†–µ—Å—Ç–∞—Ä—Ç
      </button>

      <div
        ref={trackRef}
        style={{
          display: "grid",
          gridTemplateColumns: `repeat(${gridWidth}, 40px)`,
          width: "100%",
          maxWidth: 800,
          margin: "auto",
          overflowX: "auto",
          borderRadius: 8,
          boxShadow: "0 0 20px rgba(0,0,0,0.7)",
          backgroundColor: "#111",
          padding: 10,
        }}
      >
        {renderGrid()}
      </div>
    </div>
  );
};

export default RaceHorizontalFixed;
